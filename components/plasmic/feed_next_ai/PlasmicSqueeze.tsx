// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ewmXQJz5QcseZaj8LdYn4d
// Component: ZR-WtrdzK7mrtW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import NavLogoOnly from "../../NavLogoOnly"; // plasmic-import: lYB7UdKosV5ydd/component
import SqueezeForm from "../../SqueezeForm"; // plasmic-import: p006x18VMOjaEw/component
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: AEGdB2KywRfR/codeComponent

import { useScreenVariants as useScreenVariantspm7PaVxsIGwRo0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Pm7PAVxsIGwRo0/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_feed_next_ai.module.css"; // plasmic-import: ewmXQJz5QcseZaj8LdYn4d/projectcss
import sty from "./PlasmicSqueeze.module.css"; // plasmic-import: ZR-WtrdzK7mrtW/css

export type PlasmicSqueeze__VariantMembers = {};
export type PlasmicSqueeze__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueeze__VariantsArgs;
export const PlasmicSqueeze__VariantProps = new Array<VariantPropType>();

export type PlasmicSqueeze__ArgsType = {};
type ArgPropType = keyof PlasmicSqueeze__ArgsType;
export const PlasmicSqueeze__ArgProps = new Array<ArgPropType>();

export type PlasmicSqueeze__OverridesType = {
  root?: p.Flex<"div">;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  navLogoOnly?: p.Flex<typeof NavLogoOnly>;
  productDetails2?: p.Flex<"div">;
  sThumbail?: p.Flex<typeof p.PlasmicImg>;
  sH1?: p.Flex<"div">;
  sH2?: p.Flex<"div">;
  sH3?: p.Flex<"div">;
  head?: p.Flex<typeof PlasmicHead>;
  productDetails?: p.Flex<"div">;
};

export interface DefaultSqueezeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueeze__RenderFunc(props: {
  variants: PlasmicSqueeze__VariantsArgs;
  args: PlasmicSqueeze__ArgsType;
  overrides: PlasmicSqueeze__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspm7PaVxsIGwRo0()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSqueeze.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSqueeze.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSqueeze.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
          id={(() => {
            try {
              return $ctx.params.slug;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchDyanamicData" as const}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx => "Error fetching data"}
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization: "Bearer keyVDvhyVSx5Ntbl3"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET" as const}
            noLayout={false}
            url={(() => {
              try {
                return (
                  "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=" +
                  "'" +
                  $ctx.params.slug +
                  "'"
                );
              } catch (e) {
                if (e instanceof TypeError) {
                  return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/PlasmicCMS?filterByFormula=slug=";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <NavLogoOnly
                    data-plasmic-name={"navLogoOnly"}
                    data-plasmic-override={overrides.navLogoOnly}
                    className={classNames("__wab_instance", sty.navLogoOnly)}
                  />

                  <div
                    data-plasmic-name={"productDetails2"}
                    data-plasmic-override={overrides.productDetails2}
                    className={classNames(projectcss.all, sty.productDetails2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__mlXoI)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jpPsl
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"sThumbail"}
                          data-plasmic-override={overrides.sThumbail}
                          alt={""}
                          className={classNames(sty.sThumbail)}
                          displayHeight={"175px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"196px" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .sThumbail[0].url;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>

                      <div
                        className={classNames(projectcss.all, sty.column__yePv)}
                      >
                        <div
                          data-plasmic-name={"sH1"}
                          data-plasmic-override={overrides.sH1}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.sH1
                          )}
                        >
                          {(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .sH1;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Product Name Here";
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          data-plasmic-name={"sH2"}
                          data-plasmic-override={overrides.sH2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.sH2
                          )}
                        >
                          {(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .sH2;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Enter some text";
                              }
                              throw e;
                            }
                          })()}
                        </div>

                        <div
                          data-plasmic-name={"sH3"}
                          data-plasmic-override={overrides.sH3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.sH3
                          )}
                        >
                          {(() => {
                            try {
                              return $ctx.fetchDyanamicData.records[0].fields
                                .sH3;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Enter some text";
                              }
                              throw e;
                            }
                          })()}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__qerk1)}
                  >
                    <SqueezeForm
                      className={classNames(
                        "__wab_instance",
                        sty.squeezeForm___0FzoD
                      )}
                    />
                  </div>

                  <PlasmicHead
                    data-plasmic-name={"head"}
                    data-plasmic-override={overrides.head}
                    className={classNames("__wab_instance", sty.head)}
                    description={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields[
                          "Step 2 SEO Description"
                        ];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    title={(() => {
                      try {
                        return $ctx.fetchDyanamicData.fields[
                          "Step 2 SEO Title"
                        ];
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oFJkZ)}
                    >
                      {true ? (
                        <div
                          data-plasmic-name={"productDetails"}
                          data-plasmic-override={overrides.productDetails}
                          className={classNames(
                            projectcss.all,
                            sty.productDetails
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__xdCug
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns__cUrMv
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__wtSYv
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__ishG)}
                                  displayHeight={"175px" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("170px" as const)
                                      : ("196px" as const)
                                  }
                                  loading={"lazy" as const}
                                  src={(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.fields
                                        .sThumbail[0].url;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__fmQNz
                                )}
                              >
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nWjUy
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $ctx.fetchDyanamicData.fields
                                          .sH1;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Enter some text";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </div>
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tba4U
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $ctx.fetchDyanamicData.fields
                                          .sH2;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "undefine";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </div>
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vgScB
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $ctx.fetchDyanamicData.fields
                                          .sH1;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Enter some text";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </div>
                                ) : null}
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__a5B95
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $ctx.fetchDyanamicData.fields
                                          .sH2;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Enter some text";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </div>
                                ) : null}

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8KxNo
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.fields.sH3;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "Enter some text";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </div>
                              </div>
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}

                      <SqueezeForm
                        className={classNames(
                          "__wab_instance",
                          sty.squeezeForm__op9Z
                        )}
                      />

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4KZS
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__pMdkh)}
                            displayHeight={"56px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={(() => {
                              try {
                                return $ctx.fetchDyanamicData.fields.logo[0]
                                  .url;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpApiFetcher",
    "navLogoOnly",
    "productDetails2",
    "sThumbail",
    "sH1",
    "sH2",
    "sH3",
    "head",
    "productDetails"
  ],
  httpApiFetcher: [
    "httpApiFetcher",
    "navLogoOnly",
    "productDetails2",
    "sThumbail",
    "sH1",
    "sH2",
    "sH3",
    "head",
    "productDetails"
  ],
  navLogoOnly: ["navLogoOnly"],
  productDetails2: ["productDetails2", "sThumbail", "sH1", "sH2", "sH3"],
  sThumbail: ["sThumbail"],
  sH1: ["sH1"],
  sH2: ["sH2"],
  sH3: ["sH3"],
  head: ["head"],
  productDetails: ["productDetails"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpApiFetcher: typeof DataFetcher;
  navLogoOnly: typeof NavLogoOnly;
  productDetails2: "div";
  sThumbail: typeof p.PlasmicImg;
  sH1: "div";
  sH2: "div";
  sH3: "div";
  head: typeof PlasmicHead;
  productDetails: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueeze__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueeze__VariantsArgs;
    args?: PlasmicSqueeze__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueeze__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueeze__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSqueeze__ArgProps,
          internalVariantPropNames: PlasmicSqueeze__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSqueeze__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueeze";
  } else {
    func.displayName = `PlasmicSqueeze.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueeze = Object.assign(
  // Top-level PlasmicSqueeze renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    navLogoOnly: makeNodeComponent("navLogoOnly"),
    productDetails2: makeNodeComponent("productDetails2"),
    sThumbail: makeNodeComponent("sThumbail"),
    sH1: makeNodeComponent("sH1"),
    sH2: makeNodeComponent("sH2"),
    sH3: makeNodeComponent("sH3"),
    head: makeNodeComponent("head"),
    productDetails: makeNodeComponent("productDetails"),

    // Metadata about props expected for PlasmicSqueeze
    internalVariantProps: PlasmicSqueeze__VariantProps,
    internalArgProps: PlasmicSqueeze__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Squeeze",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSqueeze;
/* prettier-ignore-end */
